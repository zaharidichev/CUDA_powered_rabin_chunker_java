/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class cudaLinker_CudaLink */

#ifndef _Included_cudaLinker_CudaLink
#define _Included_cudaLinker_CudaLink
#ifdef __cplusplus
extern "C" {
#endif
/*
 * This is the prototype for the method that is used to connect the java calls
 * to the native CUDA calls from the combiled library. 
 *
 * Class:     cudaLinker_CudaLink
 * Method:    createChunksOnGPU
 * Signature: (I[B[II[BIII)I
 */
JNIEXPORT jint JNICALL Java_com_zaharidichev_GPUchunker_CUDAhandle_CudaLink_createChunksOnGPU (JNIEnv *, jobject, jint, jbyteArray, jintArray, jint, jbyteArray, jint, jint, jint, jint, jint);

/*
 * Again this method communicates directly with the low level C Cuda API in order
 * to find out the size of the buffer that is present on the GPU card. This enables
 * the used of the chunking system to query the aviable global memory on the GPU 
 * at runtime.
 *
 * Class:     cudaLinker_CudaLink
 * Method:    getSizeOfGPUBuffer
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_zaharidichev_GPUchunker_CUDAhandle_CudaLink_getSizeOfGPUBuffer (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
